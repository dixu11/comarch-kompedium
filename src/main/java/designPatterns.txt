    wzorce kreacyjne:
        *Budowniczy (obiektowy), (LOMBOK!)
        Fabryka abstrakcyjna (obiektowy), (definije alternatywne sposoby tworzenia rodzin obiektów np. ciemny jasny motyw intellij)
        Metoda wytwórcza (klasowy),  (jeśli obiekt wytwarza sobie obiekty pomocnicze pozwala zepchnąć ich tworzenie do implementacji)
        Prototyp (obiektowy), (kopiowanie / klonowanie obiektów - pojęcie powierzchownej kopii i głębokiej)
        *Singleton (obiektowy); ( tylko jeden obiekt na całą aplikację, dostępny globalnie (kontrowersje))

    wzorce strukturalne:
        *Adapter (klasowy oraz obiektowy), (pozwala podpiąć obiekt pod pasujący interfejs bez implementowania go(modyfikowania klasy))
        *Dekorator (obiektowy), (alternatywa dla dziedziczenia, pozwala rozszrzać funkcjonalności obiektu podczas działania aplikacji)
        *Fasada (obiektowy), (obiekt za którym chowamy skomplikowany system aby uprościć do niego dostęp)
        Kompozyt (obiektowy), (wiele powiązanych obiektów możemy traktować jakby były jednym)  - foldery
        Most (obiektowy), (oddzielenie abstrakcji od implementacji na poziomie struktury)
        Pełnomocnik (obiektowy), (proxy - robi dodatkowe operacje zanim użyjesz właściwego obiektu - np cashowanie)
        Pyłek (obiektowy); (optymalizacja pamięci)

    wzorce czynnościowe/operacyjne:
        Łańcuch zobowiązań/odpowiedzialności (obiektowy), (zadanie jest przesyłane serwisom ułożonym w łańcuch.
                            Serwis albo obsługuje zadanie pasujące do jego typu albo przekazuje je dalej. ->taśma produkcyjna
        *Polecenie (obiektowy), - wzorzec traktujący wywałenie metody jak osobiekt.
        Interpreter (klasowy), - traktowanie tekstu jako komend
        Iterator (obiektowy), - już zaimplementowny wzorzec w javie w kolekcjach - pętle for-each
        *Mediator (obiektowy), - komunikacja między obiektami w jednym miescu w mediatorze
        Pamiątka/Memento (ang. Memento) (obiektowy), - przywracanie obiektu do wcześnieszgo stanu -> ctrl + z
        *Metoda szablonowa (ang. template method) (klasowy),
                    - wspólny algorytm którego kroki są zmienne i zaimplementowane w klasach dziedzących
                      -> przepis kucharski
        *Obserwator (obiektowy) -> zmieniający się obiekt powiadamia zainteresowanych o zmianach staniu
        *Strategia (obiektowy) -> uzykanie zmienności działanie metody na podstawie stanu w trakcie działania aplikacji -> przykład w StrategyPattern.java
        Stan (obiektowy) -> dla wszystkich zachowań obiektu: https://www.youtube.com/watch?v=De4pHck7qv4&ab_channel=SzlichtProgramming
        Odwiedzający/Wizytator (ang. visitor) (obiektowy), -> dla aplikacji w której jest wiele zachowań małej ilości obiektów.
                                        Dodajemy nowe zachowania do obiektów bez zmieniania ich stanu.
